trigger:
  branches:
    include:
      - main
      - dev
      - uat  # 這些分支有變更時會執行完整 Pipeline

pr:
  branches:
    include:
      - main
      - dev
      - uat  # PR 只執行 CI（測試、Lint），不進行部署

pool:
  name: 'Default'  # 你的 Self-hosted Agent Pool

steps:
  - script: |
      echo "Checking Python installation..."
      python3 --version
      which python3
    displayName: 'Check Python Version'

  - script: |
      echo "Creating Python Virtual Environment..."
      python3 -m venv venv  # 建立虛擬環境
      source venv/bin/activate  # 啟動虛擬環境
      echo "Upgrading pip and installing dependencies..."
      python -m pip install --upgrade pip
      python -m pip install -r flask_app/requirements.txt  # 安裝依賴
    displayName: 'Install Dependencies'

  - script: |
      echo "Running flake8 linting..."
      source venv/bin/activate  # 確保使用虛擬環境
      flake8 flask_app  # 檢查 flask_app 目錄中的所有 Python 檔案
    displayName: 'Run Linting'
    continueOnError: true  # 如果 Linting 失敗，仍繼續

  - script: |
      echo "Running PyLint..."
      source venv/bin/activate
      pylint flask_app
    displayName: 'Run PyLint'
    continueOnError: true

  - script: |
      echo "Starting Flask App..."
      source venv/bin/activate  # 確保使用虛擬環境
      export FLASK_APP=flask_app.app  # 設置 FLASK_APP 環境變數
      flask run --host=0.0.0.0 --port=5001 &  # 啟動 Flask 應用
      sleep 10  # 等待 Flask 啟動
      curl -v http://127.0.0.1:5001/  # 驗證 API
    displayName: 'Start Flask & Check API'

  - script: |
      echo "Running API Tests..."
      source venv/bin/activate  # 確保使用虛擬環境
      export PYTHONPATH=$(pwd)  # 確保 pytest 能找到 flask_app
      echo "PYTHONPATH is set to $PYTHONPATH"
      pytest -v flask_app/tests/test_routes.py  # 指定測試檔案
    displayName: 'Run API Tests'

  - script: |
      echo "Stopping Flask App..."
      pkill -f flask || echo "Flask process not found"  # 停止 Flask 應用
    displayName: 'Stop Flask App'

  # **🔹 先清除 `__pycache__` 和 `.pyc`，確保不被打包**
  - script: |
      echo "Cleaning up __pycache__ and .pyc files before packaging..."
      find flask_app -name "__pycache__" -type d -exec rm -rf {} +
      find flask_app -name "*.pyc" -type f -delete
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: 'Clean up __pycache__ and .pyc files (Before Packaging)'

  # **🔹 只在 Merge 時打包 & 部署**
  - task: ArchiveFiles@2
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/flask_app'
      includeRootFolder: true
      archiveFile: '$(Build.ArtifactStagingDirectory)/flask_app.zip'
      replaceExistingArchive: true
      verbose: true
      exclude: |
        **/__pycache__/**
        **/*.pyc
    displayName: 'Archive flask_app folder (Only on Merge)'

  - task: AzureWebApp@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      azureSubscription: 'twlife_azure_devops_poc'  # 您創建的 Service Connection 名稱
      appName: 'twlife-azure-devops-poc'  # 您的 Azure App Service 名稱
      package: '$(Build.ArtifactStagingDirectory)/flask_app.zip'  # 指向打包好的 ZIP 檔
    displayName: 'Deploy to Azure App Service (Only on Merge)'

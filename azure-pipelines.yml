trigger:
  branches:
    include:
      - main
      - dev
      - uat  # 這些分支有變更時會執行完整 Pipeline

pr:
  branches:
    include:
      - main
      - dev
      - uat  # PR 只執行 CI（測試、Lint），不進行部署

pool:
  name: 'Default'

steps:
  - script: |
      echo "Checking Python installation..."
      python3 --version
      which python3
    displayName: 'Check Python Version'

  - script: |
      echo "Creating Python Virtual Environment..."
      python3 -m venv venv
      source venv/bin/activate
      echo "Upgrading pip and installing dependencies..."
      python -m pip install --upgrade pip
      python -m pip install -r flask_app/requirements.txt
    displayName: 'Install Dependencies'

  - script: |
      echo "Running flake8 linting..."
      source venv/bin/activate
      flake8 flask_app
    displayName: 'Run Linting'
    continueOnError: true

  - script: |
      echo "Running PyLint..."
      source venv/bin/activate
      pylint flask_app
    displayName: 'Run PyLint'
    continueOnError: true

  - script: |
      echo "Starting Flask App..."
      source venv/bin/activate
      export FLASK_APP=flask_app.app
      flask run --host=0.0.0.0 --port=5001 &
      sleep 10
      curl -v http://127.0.0.1:5001/
    displayName: 'Start Flask & Check API'

  - script: |
      echo "Running API Tests..."
      source venv/bin/activate
      export PYTHONPATH=$(pwd)
      echo "PYTHONPATH is set to $PYTHONPATH"
      pytest -v flask_app/tests/test_routes.py
    displayName: 'Run API Tests'

  - script: |
      echo "Stopping Flask App..."
      pkill -f flask || echo "Flask process not found"
    displayName: 'Stop Flask App'

  # **  確保 `requirements.txt` 在打包時一起傳到 Azure**
  - script: |
      echo "Copying requirements.txt to build directory..."
      cp flask_app/requirements.txt $(Build.ArtifactStagingDirectory)/requirements.txt
    displayName: 'Move requirements.txt to Root'
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  - script: |
      echo "Cleaning up __pycache__ and .pyc files before packaging..."
      find flask_app -name "__pycache__" -type d -exec rm -rf {} +
      find flask_app -name "*.pyc" -type f -delete
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: 'Clean up __pycache__ and .pyc files (Before Packaging)'

  # ** 修改打包步驟，確保 `requirements.txt` 也包含在 ZIP 檔案內**
  - task: ArchiveFiles@2
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
      includeRootFolder: true
      archiveFile: '$(Build.ArtifactStagingDirectory)/flask_app.zip'
      replaceExistingArchive: true
      verbose: true
      exclude: |
        **/__pycache__/**
        **/*.pyc
    displayName: 'Archive flask_app folder + requirements.txt (Only on Merge)'

  - task: AzureWebApp@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      azureSubscription: 'twlife_azure_devops_poc'
      appName: 'twlife-azure-devops-poc'
      package: '$(Build.ArtifactStagingDirectory)/flask_app.zip'
    displayName: 'Deploy to Azure App Service (Only on Merge)'

  # **檢查 Flask 是否成功啟動**
  - script: |
      echo "Checking if Flask is running on localhost..."
      HEALTH_URL="http://localhost:8000/health"
      for i in {1..10}; do
          HTTP_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" $HEALTH_URL)
          if [ "$HTTP_CODE" -eq 200 ]; then
              echo "Flask is up and running at $HEALTH_URL!"
              exit 0
          fi
          echo "⚠️ Health check failed with status $HTTP_CODE, retrying in 5s..."
          sleep 5
      done
      echo "Flask service did not start in time. Failing deployment."
      exit 1
    displayName: 'Check Flask Health (Post Deployment)'
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
